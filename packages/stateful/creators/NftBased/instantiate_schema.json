{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": ["nft_contract"],
  "properties": {
    "active_threshold": {
      "description": "The number or percentage of tokens that must be staked for the DAO to be active",
      "anyOf": [
        {
          "$ref": "#/definitions/ActiveThreshold"
        },
        {
          "type": "null"
        }
      ]
    },
    "nft_contract": {
      "description": "Address of the cw721 NFT contract that may be staked.",
      "allOf": [
        {
          "$ref": "#/definitions/NftContract"
        }
      ]
    },
    "owner": {
      "description": "May change unstaking duration and add hooks.",
      "anyOf": [
        {
          "$ref": "#/definitions/Admin"
        },
        {
          "type": "null"
        }
      ]
    },
    "unstaking_duration": {
      "description": "Amount of time between unstaking and tokens being avaliable. To unstake with no delay, leave as `None`.",
      "anyOf": [
        {
          "$ref": "#/definitions/Duration"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "ActiveThreshold": {
      "description": "The threshold of tokens that must be staked in order for this voting module to be active. If this is not reached, this module will response to `is_active` queries with false and proposal modules which respect active thresholds will not allow the creation of proposals.",
      "oneOf": [
        {
          "description": "The absolute number of tokens that must be staked for the module to be active.",
          "type": "object",
          "required": ["absolute_count"],
          "properties": {
            "absolute_count": {
              "type": "object",
              "required": ["count"],
              "properties": {
                "count": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The percentage of tokens that must be staked for the module to be active. Computed as `staked / total_supply`.",
          "type": "object",
          "required": ["percentage"],
          "properties": {
            "percentage": {
              "type": "object",
              "required": ["percent"],
              "properties": {
                "percent": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Admin": {
      "description": "Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules.",
      "oneOf": [
        {
          "description": "Set the admin to a specified address.",
          "type": "object",
          "required": ["address"],
          "properties": {
            "address": {
              "type": "object",
              "required": ["addr"],
              "properties": {
                "addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets the admin as the core module address.",
          "type": "object",
          "required": ["core_module"],
          "properties": {
            "core_module": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": ["height"],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": ["time"],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "NftContract": {
      "oneOf": [
        {
          "type": "object",
          "required": ["existing"],
          "properties": {
            "existing": {
              "type": "object",
              "required": ["address"],
              "properties": {
                "address": {
                  "description": "Address of an already instantiated cw721 token contract.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["new"],
          "properties": {
            "new": {
              "type": "object",
              "required": [
                "code_id",
                "initial_nfts",
                "label",
                "name",
                "symbol"
              ],
              "properties": {
                "code_id": {
                  "description": "Code ID for cw721 token contract.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "initial_nfts": {
                  "description": "Initial NFTs to mint when creating the NFT contract. If empty, an error is thrown.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NftMintMsg"
                  }
                },
                "label": {
                  "description": "Label to use for instantiated cw721 contract.",
                  "type": "string"
                },
                "name": {
                  "description": "NFT collection name",
                  "type": "string"
                },
                "symbol": {
                  "description": "NFT collection symbol",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "NftMintMsg": {
      "type": "object",
      "required": ["extension", "owner", "token_id"],
      "properties": {
        "extension": {
          "description": "Any custom extension used by this contract",
          "allOf": [
            {
              "$ref": "#/definitions/Empty"
            }
          ]
        },
        "owner": {
          "description": "The owner of the newly minter NFT",
          "type": "string"
        },
        "token_id": {
          "description": "Unique ID of the NFT",
          "type": "string"
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": ["string", "null"]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
