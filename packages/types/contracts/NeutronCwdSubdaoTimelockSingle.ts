/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  overrule_pre_propose: string
}
export type ExecuteMsg =
  | {
      timelock_proposal: {
        msgs: CosmosMsgForNeutronMsg[]
        proposal_id: number
      }
    }
  | {
      execute_proposal: {
        proposal_id: number
      }
    }
  | {
      overrule_proposal: {
        proposal_id: number
      }
    }
  | {
      update_config: {
        overrule_pre_propose?: string | null
        owner?: string | null
      }
    }
export type CosmosMsgForNeutronMsg =
  | {
      bank: BankMsg
    }
  | {
      custom: NeutronMsg
    }
  | {
      staking: StakingMsg
    }
  | {
      distribution: DistributionMsg
    }
  | {
      stargate: {
        type_url: string
        value: Binary
      }
    }
  | {
      ibc: IbcMsg
    }
  | {
      wasm: WasmMsg
    }
  | {
      gov: GovMsg
    }
export type BankMsg =
  | {
      send: {
        amount: Coin[]
        to_address: string
      }
    }
  | {
      burn: {
        amount: Coin[]
      }
    }
export type Uint128 = string
export type NeutronMsg =
  | {
      register_interchain_account: {
        connection_id: string
        interchain_account_id: string
        register_fee?: Coin[] | null
      }
    }
  | {
      submit_tx: {
        connection_id: string
        fee: IbcFee
        interchain_account_id: string
        memo: string
        msgs: ProtobufAny[]
        timeout: number
      }
    }
  | {
      register_interchain_query: {
        connection_id: string
        keys: KVKey[]
        query_type: string
        transactions_filter: string
        update_period: number
      }
    }
  | {
      update_interchain_query: {
        new_keys?: KVKey[] | null
        new_transactions_filter?: string | null
        new_update_period?: number | null
        query_id: number
      }
    }
  | {
      remove_interchain_query: {
        query_id: number
      }
    }
  | {
      ibc_transfer: {
        fee: IbcFee
        memo: string
        receiver: string
        sender: string
        source_channel: string
        source_port: string
        timeout_height: RequestPacketTimeoutHeight
        timeout_timestamp: number
        token: Coin
      }
    }
  | {
      submit_admin_proposal: {
        admin_proposal: AdminProposal
      }
    }
  | {
      create_denom: {
        subdenom: string
      }
    }
  | {
      change_admin: {
        denom: string
        new_admin_address: string
      }
    }
  | {
      mint_tokens: {
        amount: Uint128
        denom: string
        mint_to_address: string
      }
    }
  | {
      burn_tokens: {
        amount: Uint128
        burn_from_address: string
        denom: string
      }
    }
  | {
      set_before_send_hook: {
        contract_addr: string
        denom: string
      }
    }
  | {
      force_transfer: {
        amount: Uint128
        denom: string
        transfer_from_address: string
        transfer_to_address: string
      }
    }
  | {
      set_denom_metadata: {
        base: string
        denom_units: DenomUnit[]
        description: string
        display: string
        name: string
        symbol: string
        uri: string
        uri_hash: string
      }
    }
  | {
      add_schedule: {
        msgs: MsgExecuteContract[]
        name: string
        period: number
      }
    }
  | {
      remove_schedule: {
        name: string
      }
    }
  | {
      resubmit_failure: {
        failure_id: number
      }
    }
  | {
      dex: DexMsg
    }
export type Binary = string
export type AdminProposal =
  | {
      param_change_proposal: ParamChangeProposal
    }
  | {
      upgrade_proposal: UpgradeProposal
    }
  | {
      client_update_proposal: ClientUpdateProposal
    }
  | {
      proposal_execute_message: ProposalExecuteMessage
    }
  | {
      software_upgrade_proposal: SoftwareUpgradeProposal
    }
  | {
      cancel_software_upgrade_proposal: CancelSoftwareUpgradeProposal
    }
  | {
      pin_codes_proposal: PinCodesProposal
    }
  | {
      unpin_codes_proposal: UnpinCodesProposal
    }
  | {
      sudo_contract_proposal: SudoContractProposal
    }
  | {
      update_admin_proposal: UpdateAdminProposal
    }
  | {
      clear_admin_proposal: ClearAdminProposal
    }
export type DexMsg =
  | {
      deposit: {
        amounts_a: Uint128[]
        amounts_b: Uint128[]
        fees: number[]
        options: DepositOption[]
        receiver: string
        tick_indexes_a_to_b: number[]
        token_a: string
        token_b: string
      }
    }
  | {
      withdrawal: {
        fees: number[]
        receiver: string
        shares_to_remove: Uint128[]
        tick_indexes_a_to_b: number[]
        token_a: string
        token_b: string
      }
    }
  | {
      place_limit_order: {
        amount_in: Uint128
        expiration_time?: number | null
        max_amount_out?: Uint128 | null
        order_type: LimitOrderType
        receiver: string
        tick_index_in_to_out: number
        token_in: string
        token_out: string
      }
    }
  | {
      withdraw_filled_limit_order: {
        tranche_key: string
      }
    }
  | {
      cancel_limit_order: {
        tranche_key: string
      }
    }
  | {
      multi_hop_swap: {
        amount_in: Uint128
        exit_limit_price: PrecDec
        pick_best_route: boolean
        receiver: string
        routes: MultiHopRoute[]
      }
    }
export type LimitOrderType =
  | 'GOOD_TIL_CANCELLED'
  | 'FILL_OR_KILL'
  | 'IMMEDIATE_OR_CANCEL'
  | 'JUST_IN_TIME'
  | 'GOOD_TIL_TIME'
export type StakingMsg =
  | {
      delegate: {
        amount: Coin
        validator: string
      }
    }
  | {
      undelegate: {
        amount: Coin
        validator: string
      }
    }
  | {
      redelegate: {
        amount: Coin
        dst_validator: string
        src_validator: string
      }
    }
export type DistributionMsg =
  | {
      set_withdraw_address: {
        address: string
      }
    }
  | {
      withdraw_delegator_reward: {
        validator: string
      }
    }
export type IbcMsg =
  | {
      transfer: {
        amount: Coin
        channel_id: string
        timeout: IbcTimeout
        to_address: string
      }
    }
  | {
      send_packet: {
        channel_id: string
        data: Binary
        timeout: IbcTimeout
      }
    }
  | {
      close_channel: {
        channel_id: string
      }
    }
export type Timestamp = Uint64
export type Uint64 = string
export type WasmMsg =
  | {
      execute: {
        contract_addr: string
        funds: Coin[]
        msg: Binary
      }
    }
  | {
      instantiate: {
        admin?: string | null
        code_id: number
        funds: Coin[]
        label: string
        msg: Binary
      }
    }
  | {
      migrate: {
        contract_addr: string
        msg: Binary
        new_code_id: number
      }
    }
  | {
      update_admin: {
        admin: string
        contract_addr: string
      }
    }
  | {
      clear_admin: {
        contract_addr: string
      }
    }
export type GovMsg = {
  vote: {
    proposal_id: number
    vote: VoteOption
  }
}
export type VoteOption = 'yes' | 'no' | 'abstain' | 'no_with_veto'
export interface Coin {
  amount: Uint128
  denom: string
}
export interface IbcFee {
  ack_fee: Coin[]
  recv_fee: Coin[]
  timeout_fee: Coin[]
}
export interface ProtobufAny {
  type_url: string
  value: Binary
}
export interface KVKey {
  key: Binary
  path: string
}
export interface RequestPacketTimeoutHeight {
  revision_height?: number | null
  revision_number?: number | null
}
export interface ParamChangeProposal {
  description: string
  param_changes: ParamChange[]
  title: string
}
export interface ParamChange {
  key: string
  subspace: string
  value: string
}
export interface UpgradeProposal {
  description: string
  plan: Plan
  title: string
  upgraded_client_state: ProtobufAny
}
export interface Plan {
  height: number
  info: string
  name: string
}
export interface ClientUpdateProposal {
  description: string
  subject_client_id: string
  substitute_client_id: string
  title: string
}
export interface ProposalExecuteMessage {
  message: string
}
export interface SoftwareUpgradeProposal {
  description: string
  plan: Plan
  title: string
}
export interface CancelSoftwareUpgradeProposal {
  description: string
  title: string
}
export interface PinCodesProposal {
  code_ids: number[]
  description: string
  title: string
}
export interface UnpinCodesProposal {
  code_ids: number[]
  description: string
  title: string
}
export interface SudoContractProposal {
  contract: string
  description: string
  msg: Binary
  title: string
}
export interface UpdateAdminProposal {
  contract: string
  description: string
  new_admin: string
  title: string
}
export interface ClearAdminProposal {
  contract: string
  description: string
  title: string
}
export interface DenomUnit {
  aliases: string[]
  denom: string
  exponent: number
}
export interface MsgExecuteContract {
  contract: string
  msg: string
}
export interface DepositOption {
  disable_swap: boolean
}
export interface PrecDec {
  i: string
}
export interface MultiHopRoute {
  hops: string[]
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null
  timestamp?: Timestamp | null
}
export interface IbcTimeoutBlock {
  height: number
  revision: number
}
export type QueryMsg =
  | {
      config: {}
    }
  | {
      proposal: {
        proposal_id: number
      }
    }
  | {
      list_proposals: {
        limit?: number | null
        start_after?: number | null
      }
    }
  | {
      proposal_execution_error: {
        proposal_id: number
      }
    }
export interface MigrateMsg {}
export type Addr = string
export interface Config {
  overrule_pre_propose: Addr
  owner: Addr
  subdao: Addr
}
export type ProposalStatus =
  | 'timelocked'
  | 'overruled'
  | 'executed'
  | 'execution_failed'
export interface ProposalListResponse {
  proposals: SingleChoiceProposal[]
}
export interface SingleChoiceProposal {
  id: number
  msgs: CosmosMsgForNeutronMsg[]
  status: ProposalStatus
}
export type NullableString = string | null
