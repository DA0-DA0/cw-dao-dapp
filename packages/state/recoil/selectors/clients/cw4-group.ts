/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.2.11.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { selectorFamily } from 'recoil'

import {
  AdminResponse,
  Cw4GroupQueryClient,
  HooksResponse,
  ListMembersResponse,
  MemberResponse,
  TotalWeightResponse,
} from '../../../clients/cw4-group'
import { cosmWasmClientSelector } from '../chain'

type QueryClientParams = {
  contractAddress: string
}

export const queryClient = selectorFamily<
  Cw4GroupQueryClient | undefined,
  QueryClientParams
>({
  key: 'cw4GroupQueryClient',
  get:
    ({ contractAddress }) =>
    ({ get }) => {
      const client = get(cosmWasmClientSelector)
      if (!client) return
      return new Cw4GroupQueryClient(client, contractAddress)
    },
})
export const adminSelector = selectorFamily<
  AdminResponse | undefined,
  QueryClientParams & {
    params: Parameters<Cw4GroupQueryClient['admin']>
  }
>({
  key: 'cw4GroupAdmin',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      if (!client) return
      return await client.admin(...params)
    },
})
export const totalWeightSelector = selectorFamily<
  TotalWeightResponse | undefined,
  QueryClientParams & {
    params: Parameters<Cw4GroupQueryClient['totalWeight']>
  }
>({
  key: 'cw4GroupTotalWeight',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      if (!client) return
      return await client.totalWeight(...params)
    },
})

export const listMembersSelector = selectorFamily<
  ListMembersResponse | undefined,
  QueryClientParams & {
    params: Parameters<Cw4GroupQueryClient['listMembers']>
  }
>({
  key: 'cw4GroupListMembers',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      if (!client) return
      return await client.listMembers(...params)
    },
})

const LIST_MEMBERS_LIMIT = 10
export const listAllMembersSelector = selectorFamily<
  ListMembersResponse | undefined,
  QueryClientParams
>({
  key: 'cw4GroupListAllMembers',
  get:
    (queryClientParams) =>
    async ({ get }) => {
      let startAfter: string | undefined

      const members: ListMembersResponse['members'] = []
      while (true) {
        const response = await get(
          listMembersSelector({
            ...queryClientParams,
            params: [{ startAfter, limit: LIST_MEMBERS_LIMIT }],
          })
        )
        if (!response?.members.length) break

        members.push(...response.members)
        startAfter = response.members[response.members.length - 1].addr

        // If we have less than the limit of items, we've exhausted them.
        if (response.members.length < LIST_MEMBERS_LIMIT) break
      }

      return { members }
    },
})

export const memberSelector = selectorFamily<
  MemberResponse | undefined,
  QueryClientParams & {
    params: Parameters<Cw4GroupQueryClient['member']>
  }
>({
  key: 'cw4GroupMember',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      if (!client) return
      return await client.member(...params)
    },
})
export const hooksSelector = selectorFamily<
  HooksResponse | undefined,
  QueryClientParams & {
    params: Parameters<Cw4GroupQueryClient['hooks']>
  }
>({
  key: 'cw4GroupHooks',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      if (!client) return
      return await client.hooks(...params)
    },
})
