/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { selectorFamily } from 'recoil'

import { Addr, WithChainId } from '@dao-dao/types'
import {
  ArrayOfTupleOfAddrAndUint128,
  BondingStatusResponse,
  Config,
  TotalPowerAtHeightResponse,
  VotingPowerAtHeightResponse,
} from '@dao-dao/types/contracts/NeutronVault'

import {
  NeutronVaultClient,
  NeutronVaultQueryClient,
} from '../../../contracts/NeutronVault'
import { signingCosmWasmClientAtom } from '../../atoms'
import { cosmWasmClientForChainSelector } from '../chain'
import { contractInfoSelector } from '../contract'

type QueryClientParams = WithChainId<{
  contractAddress: string
}>

export const queryClient = selectorFamily<
  NeutronVaultQueryClient,
  QueryClientParams
>({
  key: 'neutronVaultQueryClient',
  get:
    ({ contractAddress, chainId }) =>
    ({ get }) => {
      const client = get(cosmWasmClientForChainSelector(chainId))
      return new NeutronVaultQueryClient(client, contractAddress)
    },
  dangerouslyAllowMutability: true,
})

export type ExecuteClientParams = WithChainId<{
  contractAddress: string
  sender: string
}>

export const executeClient = selectorFamily<
  NeutronVaultClient | undefined,
  ExecuteClientParams
>({
  key: 'neutronVaultExecuteClient',
  get:
    ({ chainId, contractAddress, sender }) =>
    ({ get }) => {
      const client = get(signingCosmWasmClientAtom({ chainId }))
      if (!client) return

      return new NeutronVaultClient(client, sender, contractAddress)
    },
  dangerouslyAllowMutability: true,
})

export const configSelector = selectorFamily<
  Config,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['config']>
  }
>({
  key: 'neutronVaultConfig',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.config(...params)
    },
})
export const votingPowerAtHeightSelector = selectorFamily<
  VotingPowerAtHeightResponse,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['votingPowerAtHeight']>
  }
>({
  key: 'neutronVaultVotingPowerAtHeight',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.votingPowerAtHeight(...params)
    },
})
export const totalPowerAtHeightSelector = selectorFamily<
  TotalPowerAtHeightResponse,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['totalPowerAtHeight']>
  }
>({
  key: 'neutronVaultTotalPowerAtHeight',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.totalPowerAtHeight(...params)
    },
})
export const bondingStatusSelector = selectorFamily<
  BondingStatusResponse,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['bondingStatus']>
  }
>({
  key: 'neutronVaultBondingStatus',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.bondingStatus(...params)
    },
})
export const daoSelector = selectorFamily<
  Addr,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['dao']>
  }
>({
  key: 'neutronVaultDao',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.dao(...params)
    },
})
export const nameSelector = selectorFamily<
  String,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['name']>
  }
>({
  key: 'neutronVaultName',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.name(...params)
    },
})
export const descriptionSelector = selectorFamily<
  String,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['description']>
  }
>({
  key: 'neutronVaultDescription',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.description(...params)
    },
})
export const listBondersSelector = selectorFamily<
  ArrayOfTupleOfAddrAndUint128,
  QueryClientParams & {
    params: Parameters<NeutronVaultQueryClient['listBonders']>
  }
>({
  key: 'neutronVaultListBonders',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.listBonders(...params)
    },
})
export const infoSelector = contractInfoSelector
