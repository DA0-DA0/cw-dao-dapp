/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.17.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { selectorFamily } from 'recoil'

import { WithChainId } from '@dao-dao/types'
import {
  ArrayOfAddr,
  ArrayOfPairType,
  ConfigResponse,
  FeeInfoResponse,
  PairInfo,
  PairsResponse,
} from '@dao-dao/types/contracts/WyndexFactory'

import { WyndexFactoryQueryClient } from '../../../contracts/WyndexFactory'
import { cosmWasmClientForChainSelector } from '../chain'

type QueryClientParams = WithChainId<{
  contractAddress: string
}>

export const queryClient = selectorFamily<
  WyndexFactoryQueryClient,
  QueryClientParams
>({
  key: 'wyndexFactoryQueryClient',
  get:
    ({ contractAddress, chainId }) =>
    ({ get }) => {
      const client = get(cosmWasmClientForChainSelector(chainId))
      return new WyndexFactoryQueryClient(client, contractAddress)
    },
})

export const configSelector = selectorFamily<
  ConfigResponse,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['config']>
  }
>({
  key: 'wyndexFactoryConfig',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.config(...params)
    },
})
export const pairSelector = selectorFamily<
  PairInfo,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['pair']>
  }
>({
  key: 'wyndexFactoryPair',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.pair(...params)
    },
})
export const pairsSelector = selectorFamily<
  PairsResponse,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['pairs']>
  }
>({
  key: 'wyndexFactoryPairs',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.pairs(...params)
    },
})
export const feeInfoSelector = selectorFamily<
  FeeInfoResponse,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['feeInfo']>
  }
>({
  key: 'wyndexFactoryFeeInfo',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.feeInfo(...params)
    },
})
export const blacklistedPairTypesSelector = selectorFamily<
  ArrayOfPairType,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['blacklistedPairTypes']>
  }
>({
  key: 'wyndexFactoryBlacklistedPairTypes',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.blacklistedPairTypes(...params)
    },
})
export const pairsToMigrateSelector = selectorFamily<
  ArrayOfAddr,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['pairsToMigrate']>
  }
>({
  key: 'wyndexFactoryPairsToMigrate',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.pairsToMigrate(...params)
    },
})
export const validateStakingAddressSelector = selectorFamily<
  Boolean,
  QueryClientParams & {
    params: Parameters<WyndexFactoryQueryClient['validateStakingAddress']>
  }
>({
  key: 'wyndexFactoryValidateStakingAddress',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams))
      return await client.validateStakingAddress(...params)
    },
})
