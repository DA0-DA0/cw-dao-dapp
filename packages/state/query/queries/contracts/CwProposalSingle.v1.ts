/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions } from '@tanstack/react-query'

import {
  ConfigResponse,
  InfoResponse,
  ListProposalsResponse,
  ListVotesResponse,
  ProposalCountResponse,
  ProposalHooksResponse,
  ProposalResponse,
  ReverseProposalsResponse,
  VoteHooksResponse,
  VoteResponse,
} from '@dao-dao/types/contracts/CwProposalSingle.v1'
import { getCosmWasmClientForChainId } from '@dao-dao/utils'

import { CwProposalSingleV1QueryClient } from '../../../contracts/CwProposalSingle.v1'

export const cwProposalSingleV1QueryKeys = {
  contract: [
    {
      contract: 'cwProposalSingleV1',
    },
  ] as const,
  address: (contractAddress: string) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  config: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
  proposal: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'proposal',
        args,
      },
    ] as const,
  listProposals: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'list_proposals',
        args,
      },
    ] as const,
  reverseProposals: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'reverse_proposals',
        args,
      },
    ] as const,
  proposalCount: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'proposal_count',
        args,
      },
    ] as const,
  vote: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'vote',
        args,
      },
    ] as const,
  listVotes: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'list_votes',
        args,
      },
    ] as const,
  proposalHooks: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'proposal_hooks',
        args,
      },
    ] as const,
  voteHooks: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'vote_hooks',
        args,
      },
    ] as const,
  info: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...cwProposalSingleV1QueryKeys.address(contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
}
export const cwProposalSingleV1Queries = {
  config: <TData = ConfigResponse>({
    chainId,
    contractAddress,
    options,
  }: CwProposalSingleV1ConfigQuery<TData>): UseQueryOptions<
    ConfigResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.config(contractAddress),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).config(),
    ...options,
  }),
  proposal: <TData = ProposalResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: CwProposalSingleV1ProposalQuery<TData>): UseQueryOptions<
    ProposalResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.proposal(contractAddress, args),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposal({
        proposalId: args.proposalId,
      }),
    ...options,
  }),
  listProposals: <TData = ListProposalsResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: CwProposalSingleV1ListProposalsQuery<TData>): UseQueryOptions<
    ListProposalsResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.listProposals(contractAddress, args),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).listProposals({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  reverseProposals: <TData = ReverseProposalsResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: CwProposalSingleV1ReverseProposalsQuery<TData>): UseQueryOptions<
    ReverseProposalsResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.reverseProposals(
      contractAddress,
      args
    ),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).reverseProposals({
        limit: args.limit,
        startBefore: args.startBefore,
      }),
    ...options,
  }),
  proposalCount: <TData = ProposalCountResponse>({
    chainId,
    contractAddress,
    options,
  }: CwProposalSingleV1ProposalCountQuery<TData>): UseQueryOptions<
    ProposalCountResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.proposalCount(contractAddress),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalCount(),
    ...options,
  }),
  vote: <TData = VoteResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: CwProposalSingleV1VoteQuery<TData>): UseQueryOptions<
    VoteResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.vote(contractAddress, args),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
        // Modified since `vote` is duplicate enum in client.
      ).getVote({
        proposalId: args.proposalId,
        voter: args.voter,
      }),
    ...options,
  }),
  listVotes: <TData = ListVotesResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: CwProposalSingleV1ListVotesQuery<TData>): UseQueryOptions<
    ListVotesResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.listVotes(contractAddress, args),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).listVotes({
        limit: args.limit,
        proposalId: args.proposalId,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  proposalHooks: <TData = ProposalHooksResponse>({
    chainId,
    contractAddress,
    options,
  }: CwProposalSingleV1ProposalHooksQuery<TData>): UseQueryOptions<
    ProposalHooksResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.proposalHooks(contractAddress),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalHooks(),
    ...options,
  }),
  voteHooks: <TData = VoteHooksResponse>({
    chainId,
    contractAddress,
    options,
  }: CwProposalSingleV1VoteHooksQuery<TData>): UseQueryOptions<
    VoteHooksResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.voteHooks(contractAddress),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).voteHooks(),
    ...options,
  }),
  info: <TData = InfoResponse>({
    chainId,
    contractAddress,
    options,
  }: CwProposalSingleV1InfoQuery<TData>): UseQueryOptions<
    InfoResponse,
    Error,
    TData
  > => ({
    queryKey: cwProposalSingleV1QueryKeys.info(contractAddress),
    queryFn: async () =>
      new CwProposalSingleV1QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).info(),
    ...options,
  }),
}
export interface CwProposalSingleV1ReactQuery<TResponse, TData = TResponse> {
  chainId: string
  contractAddress: string
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  > & {
    initialData?: undefined
  }
}
export interface CwProposalSingleV1InfoQuery<TData>
  extends CwProposalSingleV1ReactQuery<InfoResponse, TData> {}
export interface CwProposalSingleV1VoteHooksQuery<TData>
  extends CwProposalSingleV1ReactQuery<VoteHooksResponse, TData> {}
export interface CwProposalSingleV1ProposalHooksQuery<TData>
  extends CwProposalSingleV1ReactQuery<ProposalHooksResponse, TData> {}
export interface CwProposalSingleV1ListVotesQuery<TData>
  extends CwProposalSingleV1ReactQuery<ListVotesResponse, TData> {
  args: {
    limit?: number
    proposalId: number
    startAfter?: string
  }
}
export interface CwProposalSingleV1VoteQuery<TData>
  extends CwProposalSingleV1ReactQuery<VoteResponse, TData> {
  args: {
    proposalId: number
    voter: string
  }
}
export interface CwProposalSingleV1ProposalCountQuery<TData>
  extends CwProposalSingleV1ReactQuery<ProposalCountResponse, TData> {}
export interface CwProposalSingleV1ReverseProposalsQuery<TData>
  extends CwProposalSingleV1ReactQuery<ReverseProposalsResponse, TData> {
  args: {
    limit?: number
    startBefore?: number
  }
}
export interface CwProposalSingleV1ListProposalsQuery<TData>
  extends CwProposalSingleV1ReactQuery<ListProposalsResponse, TData> {
  args: {
    limit?: number
    startAfter?: number
  }
}
export interface CwProposalSingleV1ProposalQuery<TData>
  extends CwProposalSingleV1ReactQuery<ProposalResponse, TData> {
  args: {
    proposalId: number
  }
}
export interface CwProposalSingleV1ConfigQuery<TData>
  extends CwProposalSingleV1ReactQuery<ConfigResponse, TData> {}
