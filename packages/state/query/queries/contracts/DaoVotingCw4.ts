/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions } from '@tanstack/react-query'

import {
  Addr,
  InfoResponse,
  TotalPowerAtHeightResponse,
  VotingPowerAtHeightResponse,
} from '@dao-dao/types/contracts/DaoVotingCw4'
import { getCosmWasmClientForChainId } from '@dao-dao/utils'

import { DaoVotingCw4QueryClient } from '../../../contracts/DaoVotingCw4'

export const daoVotingCw4QueryKeys = {
  contract: [
    {
      contract: 'daoVotingCw4',
    },
  ] as const,
  address: (contractAddress: string) =>
    [
      {
        ...daoVotingCw4QueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  groupContract: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoVotingCw4QueryKeys.address(contractAddress)[0],
        method: 'group_contract',
        args,
      },
    ] as const,
  votingPowerAtHeight: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVotingCw4QueryKeys.address(contractAddress)[0],
        method: 'voting_power_at_height',
        args,
      },
    ] as const,
  totalPowerAtHeight: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVotingCw4QueryKeys.address(contractAddress)[0],
        method: 'total_power_at_height',
        args,
      },
    ] as const,
  dao: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoVotingCw4QueryKeys.address(contractAddress)[0],
        method: 'dao',
        args,
      },
    ] as const,
  info: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoVotingCw4QueryKeys.address(contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
}
export const daoVotingCw4Queries = {
  groupContract: <TData = Addr>({
    chainId,
    contractAddress,
    options,
  }: DaoVotingCw4GroupContractQuery<TData>): UseQueryOptions<
    Addr,
    Error,
    TData
  > => ({
    queryKey: daoVotingCw4QueryKeys.groupContract(contractAddress),
    queryFn: async () =>
      new DaoVotingCw4QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).groupContract(),
    ...options,
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoVotingCw4VotingPowerAtHeightQuery<TData>): UseQueryOptions<
    VotingPowerAtHeightResponse,
    Error,
    TData
  > => ({
    queryKey: daoVotingCw4QueryKeys.votingPowerAtHeight(contractAddress, args),
    queryFn: async () =>
      new DaoVotingCw4QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).votingPowerAtHeight({
        address: args.address,
        height: args.height,
      }),
    ...options,
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: DaoVotingCw4TotalPowerAtHeightQuery<TData>): UseQueryOptions<
    TotalPowerAtHeightResponse,
    Error,
    TData
  > => ({
    queryKey: daoVotingCw4QueryKeys.totalPowerAtHeight(contractAddress, args),
    queryFn: async () =>
      new DaoVotingCw4QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).totalPowerAtHeight({
        height: args.height,
      }),
    ...options,
  }),
  dao: <TData = Addr>({
    chainId,
    contractAddress,
    options,
  }: DaoVotingCw4DaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoVotingCw4QueryKeys.dao(contractAddress),
    queryFn: async () =>
      new DaoVotingCw4QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).dao(),
    ...options,
  }),
  info: <TData = InfoResponse>({
    chainId,
    contractAddress,
    options,
  }: DaoVotingCw4InfoQuery<TData>): UseQueryOptions<
    InfoResponse,
    Error,
    TData
  > => ({
    queryKey: daoVotingCw4QueryKeys.info(contractAddress),
    queryFn: async () =>
      new DaoVotingCw4QueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).info(),
    ...options,
  }),
}
export interface DaoVotingCw4ReactQuery<TResponse, TData = TResponse> {
  chainId: string
  contractAddress: string
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  > & {
    initialData?: undefined
  }
}
export interface DaoVotingCw4InfoQuery<TData>
  extends DaoVotingCw4ReactQuery<InfoResponse, TData> {}
export interface DaoVotingCw4DaoQuery<TData>
  extends DaoVotingCw4ReactQuery<Addr, TData> {}
export interface DaoVotingCw4TotalPowerAtHeightQuery<TData>
  extends DaoVotingCw4ReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number
  }
}
export interface DaoVotingCw4VotingPowerAtHeightQuery<TData>
  extends DaoVotingCw4ReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string
    height?: number
  }
}
export interface DaoVotingCw4GroupContractQuery<TData>
  extends DaoVotingCw4ReactQuery<Addr, TData> {}
