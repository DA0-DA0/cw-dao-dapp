/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { QueryClient, UseQueryOptions } from '@tanstack/react-query'

import {
  Addr,
  Config,
  HooksResponse,
  InfoResponse,
  ProposalCreationPolicy,
  ProposalListResponse,
  ProposalResponse,
  VoteListResponse,
  VoteResponse,
} from '@dao-dao/types/contracts/DaoProposalMultiple'
import { getCosmWasmClientForChainId } from '@dao-dao/utils'

import { DaoProposalMultipleQueryClient } from '../../../contracts/DaoProposalMultiple'
import { contractQueries } from '../contract'
import { indexerQueries } from '../indexer'

export const daoProposalMultipleQueryKeys = {
  contract: [
    {
      contract: 'daoProposalMultiple',
    },
  ] as const,
  address: (contractAddress: string) =>
    [
      {
        ...daoProposalMultipleQueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  config: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
  proposal: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'proposal',
        args,
      },
    ] as const,
  listProposals: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'list_proposals',
        args,
      },
    ] as const,
  reverseProposals: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'reverse_proposals',
        args,
      },
    ] as const,
  getVote: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'get_vote',
        args,
      },
    ] as const,
  listVotes: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'list_votes',
        args,
      },
    ] as const,
  proposalCount: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'proposal_count',
        args,
      },
    ] as const,
  proposalCreationPolicy: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'proposal_creation_policy',
        args,
      },
    ] as const,
  proposalHooks: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'proposal_hooks',
        args,
      },
    ] as const,
  voteHooks: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'vote_hooks',
        args,
      },
    ] as const,
  dao: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'dao',
        args,
      },
    ] as const,
  info: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
  nextProposalId: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
        method: 'next_proposal_id',
        args,
      },
    ] as const,
}
export const daoProposalMultipleQueries = {
  config: <TData = Config>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoProposalMultipleConfigQuery<TData>
  ): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.config(contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoProposalMultiple/config',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).config()
    },
    ...options,
  }),
  proposal: <TData = ProposalResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoProposalMultipleProposalQuery<TData>
  ): UseQueryOptions<ProposalResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.proposal(contractAddress, args),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoProposalMultiple/proposal',
            args: {
              id: args.proposalId,
            },
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposal({
        proposalId: args.proposalId,
      })
    },
    ...options,
  }),
  listProposals: <TData = ProposalListResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoProposalMultipleListProposalsQuery<TData>
  ): UseQueryOptions<ProposalListResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.listProposals(contractAddress, args),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return {
          proposals: await queryClient.fetchQuery(
            indexerQueries.queryContract(queryClient, {
              chainId,
              contractAddress,
              formula: 'daoProposalMultiple/listProposals',
              args,
            })
          ),
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).listProposals({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  reverseProposals: <TData = ProposalListResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoProposalMultipleReverseProposalsQuery<TData>
  ): UseQueryOptions<ProposalListResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.reverseProposals(
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return {
          proposals: await queryClient.fetchQuery(
            indexerQueries.queryContract(queryClient, {
              chainId,
              contractAddress,
              formula: 'daoProposalMultiple/reverseProposals',
              args,
            })
          ),
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).reverseProposals({
        limit: args.limit,
        startBefore: args.startBefore,
      })
    },
    ...options,
  }),
  getVote: <TData = VoteResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoProposalMultipleGetVoteQuery<TData>
  ): UseQueryOptions<VoteResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.getVote(contractAddress, args),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return {
          vote: await queryClient.fetchQuery(
            indexerQueries.queryContract(queryClient, {
              chainId,
              contractAddress,
              formula: 'daoProposalMultiple/vote',
              args,
            })
          ),
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).getVote({
        proposalId: args.proposalId,
        voter: args.voter,
      })
    },
    ...options,
  }),
  listVotes: <TData = VoteListResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoProposalMultipleListVotesQuery<TData>
  ): UseQueryOptions<VoteListResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.listVotes(contractAddress, args),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return {
          votes: await queryClient.fetchQuery(
            indexerQueries.queryContract(queryClient, {
              chainId,
              contractAddress,
              formula: 'daoProposalMultiple/listVotes',
              args,
            })
          ),
        }
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).listVotes({
        limit: args.limit,
        proposalId: args.proposalId,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  proposalCount: <TData = number>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      options,
    }: DaoProposalMultipleProposalCountQuery<TData>
  ): UseQueryOptions<number, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.proposalCount(contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoProposalMultiple/proposalCount',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalCount()
    },
    ...options,
  }),
  proposalCreationPolicy: <TData = ProposalCreationPolicy>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      options,
    }: DaoProposalMultipleProposalCreationPolicyQuery<TData>
  ): UseQueryOptions<ProposalCreationPolicy, Error, TData> => ({
    queryKey:
      daoProposalMultipleQueryKeys.proposalCreationPolicy(contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoProposalMultiple/creationPolicy',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalCreationPolicy()
    },
    ...options,
  }),
  proposalHooks: <TData = HooksResponse>({
    chainId,
    contractAddress,
    options,
  }: DaoProposalMultipleProposalHooksQuery<TData>): UseQueryOptions<
    HooksResponse,
    Error,
    TData
  > => ({
    queryKey: daoProposalMultipleQueryKeys.proposalHooks(contractAddress),
    queryFn: async () => {
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalHooks()
    },
    ...options,
  }),
  voteHooks: <TData = HooksResponse>({
    chainId,
    contractAddress,
    options,
  }: DaoProposalMultipleVoteHooksQuery<TData>): UseQueryOptions<
    HooksResponse,
    Error,
    TData
  > => ({
    queryKey: daoProposalMultipleQueryKeys.voteHooks(contractAddress),
    queryFn: async () => {
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).voteHooks()
    },
    ...options,
  }),
  dao: <TData = Addr>(
    queryClient: QueryClient,
    { chainId, contractAddress, options }: DaoProposalMultipleDaoQuery<TData>
  ): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.dao(contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoProposalMultiple/dao',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).dao()
    },
    ...options,
  }),
  info: contractQueries.info,
  nextProposalId: <TData = number>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      options,
    }: DaoProposalMultipleNextProposalIdQuery<TData>
  ): UseQueryOptions<number, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.nextProposalId(contractAddress),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoProposalMultiple/nextProposalId',
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoProposalMultipleQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).nextProposalId()
    },
    ...options,
  }),
}
export interface DaoProposalMultipleReactQuery<TResponse, TData = TResponse> {
  chainId: string
  contractAddress: string
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  > & {
    initialData?: undefined
  }
}
export interface DaoProposalMultipleNextProposalIdQuery<TData>
  extends DaoProposalMultipleReactQuery<number, TData> {}
export interface DaoProposalMultipleInfoQuery<TData>
  extends DaoProposalMultipleReactQuery<InfoResponse, TData> {}
export interface DaoProposalMultipleDaoQuery<TData>
  extends DaoProposalMultipleReactQuery<Addr, TData> {}
export interface DaoProposalMultipleVoteHooksQuery<TData>
  extends DaoProposalMultipleReactQuery<HooksResponse, TData> {}
export interface DaoProposalMultipleProposalHooksQuery<TData>
  extends DaoProposalMultipleReactQuery<HooksResponse, TData> {}
export interface DaoProposalMultipleProposalCreationPolicyQuery<TData>
  extends DaoProposalMultipleReactQuery<ProposalCreationPolicy, TData> {}
export interface DaoProposalMultipleProposalCountQuery<TData>
  extends DaoProposalMultipleReactQuery<number, TData> {}
export interface DaoProposalMultipleListVotesQuery<TData>
  extends DaoProposalMultipleReactQuery<VoteListResponse, TData> {
  args: {
    limit?: number
    proposalId: number
    startAfter?: string
  }
}
export interface DaoProposalMultipleGetVoteQuery<TData>
  extends DaoProposalMultipleReactQuery<VoteResponse, TData> {
  args: {
    proposalId: number
    voter: string
  }
}
export interface DaoProposalMultipleReverseProposalsQuery<TData>
  extends DaoProposalMultipleReactQuery<ProposalListResponse, TData> {
  args: {
    limit?: number
    startBefore?: number
  }
}
export interface DaoProposalMultipleListProposalsQuery<TData>
  extends DaoProposalMultipleReactQuery<ProposalListResponse, TData> {
  args: {
    limit?: number
    startAfter?: number
  }
}
export interface DaoProposalMultipleProposalQuery<TData>
  extends DaoProposalMultipleReactQuery<ProposalResponse, TData> {
  args: {
    proposalId: number
  }
}
export interface DaoProposalMultipleConfigQuery<TData>
  extends DaoProposalMultipleReactQuery<Config, TData> {}
