/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { QueryClient, UseQueryOptions } from '@tanstack/react-query'

import {
  ArrayOfAddr,
  DelegatesResponse,
  DelegationsResponse,
  InfoResponse,
  RegistrationResponse,
  UnvotedDelegatedVotingPowerResponse,
} from '@dao-dao/types/contracts/DaoVoteDelegation'
import { getCosmWasmClientForChainId } from '@dao-dao/utils'

import { DaoVoteDelegationQueryClient } from '../../../contracts/DaoVoteDelegation'
import { contractQueries } from '../contract'
import { indexerQueries } from '../indexer'

export const daoVoteDelegationQueryKeys = {
  contract: [
    {
      contract: 'daoVoteDelegation',
    },
  ] as const,
  address: (chainId: string, contractAddress: string) =>
    [
      {
        ...daoVoteDelegationQueryKeys.contract[0],
        chainId,
        address: contractAddress,
      },
    ] as const,
  info: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
  registration: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'registration',
        args,
      },
    ] as const,
  delegates: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'delegates',
        args,
      },
    ] as const,
  delegations: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'delegations',
        args,
      },
    ] as const,
  unvotedDelegatedVotingPower: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'unvoted_delegated_voting_power',
        args,
      },
    ] as const,
  proposalModules: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'proposal_modules',
        args,
      },
    ] as const,
  votingPowerHookCallers: (
    chainId: string,
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...daoVoteDelegationQueryKeys.address(chainId, contractAddress)[0],
        method: 'voting_power_hook_callers',
        args,
      },
    ] as const,
}
export const daoVoteDelegationQueries = {
  info: contractQueries.info,
  registration: <TData = RegistrationResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoVoteDelegationRegistrationQuery<TData>
  ): UseQueryOptions<RegistrationResponse, Error, TData> => ({
    queryKey: daoVoteDelegationQueryKeys.registration(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoVoteDelegation/registration',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoVoteDelegationQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).registration({
        delegate: args.delegate,
        height: args.height,
      })
    },
    ...options,
  }),
  delegates: <TData = DelegatesResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoVoteDelegationDelegatesQuery<TData>
  ): UseQueryOptions<DelegatesResponse, Error, TData> => ({
    queryKey: daoVoteDelegationQueryKeys.delegates(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoVoteDelegation/delegates',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoVoteDelegationQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).delegates({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  delegations: <TData = DelegationsResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoVoteDelegationDelegationsQuery<TData>
  ): UseQueryOptions<DelegationsResponse, Error, TData> => ({
    queryKey: daoVoteDelegationQueryKeys.delegations(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoVoteDelegation/delegations',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoVoteDelegationQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).delegations({
        delegator: args.delegator,
        height: args.height,
        limit: args.limit,
        offset: args.offset,
      })
    },
    ...options,
  }),
  unvotedDelegatedVotingPower: <TData = UnvotedDelegatedVotingPowerResponse>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoVoteDelegationUnvotedDelegatedVotingPowerQuery<TData>
  ): UseQueryOptions<UnvotedDelegatedVotingPowerResponse, Error, TData> => ({
    queryKey: daoVoteDelegationQueryKeys.unvotedDelegatedVotingPower(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoVoteDelegation/unvotedDelegatedVotingPower',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoVoteDelegationQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).unvotedDelegatedVotingPower({
        delegate: args.delegate,
        height: args.height,
        proposalId: args.proposalId,
        proposalModule: args.proposalModule,
      })
    },
    ...options,
  }),
  proposalModules: <TData = ArrayOfAddr>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoVoteDelegationProposalModulesQuery<TData>
  ): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: daoVoteDelegationQueryKeys.proposalModules(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoVoteDelegation/proposalModules',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoVoteDelegationQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).proposalModules({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
  votingPowerHookCallers: <TData = ArrayOfAddr>(
    queryClient: QueryClient,
    {
      chainId,
      contractAddress,
      args,
      options,
    }: DaoVoteDelegationVotingPowerHookCallersQuery<TData>
  ): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: daoVoteDelegationQueryKeys.votingPowerHookCallers(
      chainId,
      contractAddress,
      args
    ),
    queryFn: async () => {
      try {
        // Attempt to fetch data from the indexer.
        return await queryClient.fetchQuery(
          indexerQueries.queryContract(queryClient, {
            chainId,
            contractAddress,
            formula: 'daoVoteDelegation/votingPowerHookCallers',
            args,
          })
        )
      } catch (error) {
        console.error(error)
      }

      // If indexer query fails, fallback to contract query.
      return new DaoVoteDelegationQueryClient(
        await getCosmWasmClientForChainId(chainId),
        contractAddress
      ).votingPowerHookCallers({
        limit: args.limit,
        startAfter: args.startAfter,
      })
    },
    ...options,
  }),
}
export interface DaoVoteDelegationReactQuery<TResponse, TData = TResponse> {
  chainId: string
  contractAddress: string
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  > & {
    initialData?: undefined
  }
}
export interface DaoVoteDelegationVotingPowerHookCallersQuery<TData>
  extends DaoVoteDelegationReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoVoteDelegationProposalModulesQuery<TData>
  extends DaoVoteDelegationReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoVoteDelegationUnvotedDelegatedVotingPowerQuery<TData>
  extends DaoVoteDelegationReactQuery<
    UnvotedDelegatedVotingPowerResponse,
    TData
  > {
  args: {
    delegate: string
    height: number
    proposalId: number
    proposalModule: string
  }
}
export interface DaoVoteDelegationDelegationsQuery<TData>
  extends DaoVoteDelegationReactQuery<DelegationsResponse, TData> {
  args: {
    delegator: string
    height?: number
    limit?: number
    offset?: number
  }
}
export interface DaoVoteDelegationDelegatesQuery<TData>
  extends DaoVoteDelegationReactQuery<DelegatesResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface DaoVoteDelegationRegistrationQuery<TData>
  extends DaoVoteDelegationReactQuery<RegistrationResponse, TData> {
  args: {
    delegate: string
    height?: number
  }
}
export interface DaoVoteDelegationInfoQuery<TData>
  extends DaoVoteDelegationReactQuery<InfoResponse, TData> {}
