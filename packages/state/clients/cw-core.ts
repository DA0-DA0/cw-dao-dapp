/**
 * This file was automatically generated by cosmwasm-typescript-gen.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  ExecuteResult,
  SigningCosmWasmClient,
} from '@cosmjs/cosmwasm-stargate'
export interface ConfigResponse {
  automatically_add_cw20s: boolean
  automatically_add_cw721s: boolean
  description: string
  image_url?: string | null
  name: string
  [k: string]: unknown
}
export type CosmosMsgFor_Empty =
  | {
      bank: BankMsg
    }
  | {
      custom: Empty
    }
  | {
      staking: StakingMsg
    }
  | {
      distribution: DistributionMsg
    }
  | {
      wasm: WasmMsg
    }
export type BankMsg =
  | {
      send: {
        amount: Coin[]
        to_address: string
        [k: string]: unknown
      }
    }
  | {
      burn: {
        amount: Coin[]
        [k: string]: unknown
      }
    }
export type Uint128 = string
export type StakingMsg =
  | {
      delegate: {
        amount: Coin
        validator: string
        [k: string]: unknown
      }
    }
  | {
      undelegate: {
        amount: Coin
        validator: string
        [k: string]: unknown
      }
    }
  | {
      redelegate: {
        amount: Coin
        dst_validator: string
        src_validator: string
        [k: string]: unknown
      }
    }
export type DistributionMsg =
  | {
      set_withdraw_address: {
        address: string
        [k: string]: unknown
      }
    }
  | {
      withdraw_delegator_reward: {
        validator: string
        [k: string]: unknown
      }
    }
export type WasmMsg =
  | {
      execute: {
        contract_addr: string
        funds: Coin[]
        msg: Binary
        [k: string]: unknown
      }
    }
  | {
      instantiate: {
        admin?: string | null
        code_id: number
        funds: Coin[]
        label: string
        msg: Binary
        [k: string]: unknown
      }
    }
  | {
      migrate: {
        contract_addr: string
        msg: Binary
        new_code_id: number
        [k: string]: unknown
      }
    }
  | {
      update_admin: {
        admin: string
        contract_addr: string
        [k: string]: unknown
      }
    }
  | {
      clear_admin: {
        contract_addr: string
        [k: string]: unknown
      }
    }
export type Binary = string
export interface Coin {
  amount: Uint128
  denom: string
  [k: string]: unknown
}
export interface Empty {
  [k: string]: unknown
}
export type Addr = string
export type Cw20BalancesResponse = Cw20BalanceResponse[]
export interface Cw20BalanceResponse {
  addr: Addr
  balance: Uint128
  [k: string]: unknown
}
export type Cw20TokenListResponse = Addr[]
export type Cw721TokenListResponse = Addr[]
export type PauseInfoResponse =
  | {
      Paused: {
        expiration: Expiration
        [k: string]: unknown
      }
    }
  | {
      Unpaused: {
        [k: string]: unknown
      }
    }
export type Expiration =
  | {
      at_height: number
    }
  | {
      at_time: Timestamp
    }
  | {
      never: {
        [k: string]: unknown
      }
    }
export type Timestamp = Uint64
export type Uint64 = string
export interface DumpStateResponse {
  config: Config
  governance_modules: Addr[]
  pause_info: PauseInfoResponse
  version: ContractVersion
  voting_module: Addr
  [k: string]: unknown
}
export interface Config {
  automatically_add_cw20s: boolean
  automatically_add_cw721s: boolean
  description: string
  image_url?: string | null
  name: string
  [k: string]: unknown
}
export interface ContractVersion {
  contract: string
  version: string
  [k: string]: unknown
}
export type Duration =
  | {
      height: number
    }
  | {
      time: number
    }
export interface GetItemResponse {
  item?: Addr | null
  [k: string]: unknown
}
export interface InfoResponse {
  info: ContractVersion
  [k: string]: unknown
}
export type InitialItemInfo =
  | {
      Existing: {
        address: string
        [k: string]: unknown
      }
    }
  | {
      Instantiate: {
        info: ModuleInstantiateInfo
        [k: string]: unknown
      }
    }
export type Admin =
  | {
      address: {
        addr: string
        [k: string]: unknown
      }
    }
  | {
      core_contract: {
        [k: string]: unknown
      }
    }
  | {
      none: {
        [k: string]: unknown
      }
    }
export interface InstantiateMsg {
  automatically_add_cw20s: boolean
  automatically_add_cw721s: boolean
  description: string
  image_url?: string | null
  initial_items?: InitialItem[] | null
  name: string
  proposal_modules_instantiate_info: ModuleInstantiateInfo[]
  voting_module_instantiate_info: ModuleInstantiateInfo
  [k: string]: unknown
}
export interface InitialItem {
  info: InitialItemInfo
  name: string
  [k: string]: unknown
}
export interface ModuleInstantiateInfo {
  admin: Admin
  code_id: number
  label: string
  msg: Binary
  [k: string]: unknown
}
export type ListItemsResponse = string[]
export type ProposalModulesResponse = Addr[]
export interface TotalPowerAtHeightResponse {
  height: number
  power: Uint128
  [k: string]: unknown
}
export type VotingModuleResponse = string
export interface VotingPowerAtHeightResponse {
  height: number
  power: Uint128
  [k: string]: unknown
}
export interface CwCoreReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
  pauseInfo: () => Promise<PauseInfoResponse>
  votingModule: () => Promise<VotingModuleResponse>
  proposalModules: ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }) => Promise<ProposalModulesResponse>
  dumpState: () => Promise<DumpStateResponse>
  getItem: ({ key }: { key: string }) => Promise<GetItemResponse>
  listItems: ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }) => Promise<ListItemsResponse>
  cw20TokenList: ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }) => Promise<Cw20TokenListResponse>
  cw721TokenList: ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }) => Promise<Cw721TokenListResponse>
  cw20Balances: ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }) => Promise<Cw20BalancesResponse>
  votingPowerAtHeight: ({
    address,
    height,
  }: {
    address: string
    height?: number
  }) => Promise<VotingPowerAtHeightResponse>
  totalPowerAtHeight: ({
    height,
  }: {
    height?: number
  }) => Promise<TotalPowerAtHeightResponse>
  info: () => Promise<InfoResponse>
}
export class CwCoreQueryClient implements CwCoreReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
    this.pauseInfo = this.pauseInfo.bind(this)
    this.votingModule = this.votingModule.bind(this)
    this.proposalModules = this.proposalModules.bind(this)
    this.dumpState = this.dumpState.bind(this)
    this.getItem = this.getItem.bind(this)
    this.listItems = this.listItems.bind(this)
    this.cw20TokenList = this.cw20TokenList.bind(this)
    this.cw721TokenList = this.cw721TokenList.bind(this)
    this.cw20Balances = this.cw20Balances.bind(this)
    this.votingPowerAtHeight = this.votingPowerAtHeight.bind(this)
    this.totalPowerAtHeight = this.totalPowerAtHeight.bind(this)
    this.info = this.info.bind(this)
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  pauseInfo = async (): Promise<PauseInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pause_info: {},
    })
  }
  votingModule = async (): Promise<VotingModuleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_module: {},
    })
  }
  proposalModules = async ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }): Promise<ProposalModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proposal_modules: {
        limit,
        start_at: startAt,
      },
    })
  }
  dumpState = async (): Promise<DumpStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dump_state: {},
    })
  }
  getItem = async ({ key }: { key: string }): Promise<GetItemResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_item: {
        key,
      },
    })
  }
  listItems = async ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }): Promise<ListItemsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_items: {
        limit,
        start_at: startAt,
      },
    })
  }
  cw20TokenList = async ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }): Promise<Cw20TokenListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw20_token_list: {
        limit,
        start_at: startAt,
      },
    })
  }
  cw721TokenList = async ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }): Promise<Cw721TokenListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw721_token_list: {
        limit,
        start_at: startAt,
      },
    })
  }
  cw20Balances = async ({
    limit,
    startAt,
  }: {
    limit?: number
    startAt?: string
  }): Promise<Cw20BalancesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw20_balances: {
        limit,
        start_at: startAt,
      },
    })
  }
  votingPowerAtHeight = async ({
    address,
    height,
  }: {
    address: string
    height?: number
  }): Promise<VotingPowerAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      voting_power_at_height: {
        address,
        height,
      },
    })
  }
  totalPowerAtHeight = async ({
    height,
  }: {
    height?: number
  }): Promise<TotalPowerAtHeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_power_at_height: {
        height,
      },
    })
  }
  info = async (): Promise<InfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      info: {},
    })
  }
}
export interface CwCoreInterface extends CwCoreReadOnlyInterface {
  contractAddress: string
  sender: string
  executeProposalHook: ({
    msgs,
  }: {
    msgs: CosmosMsgFor_Empty[]
  }) => Promise<ExecuteResult>
  updateConfig: ({ config }: { config: Config }) => Promise<ExecuteResult>
  updateVotingModule: ({
    module,
  }: {
    module: ModuleInstantiateInfo
  }) => Promise<ExecuteResult>
  updateProposalModules: ({
    toAdd,
    toRemove,
  }: {
    toAdd: ModuleInstantiateInfo[]
    toRemove: string[]
  }) => Promise<ExecuteResult>
  pause: ({ duration }: { duration: Duration }) => Promise<ExecuteResult>
  setItem: ({
    addr,
    key,
  }: {
    addr: string
    key: string
  }) => Promise<ExecuteResult>
  removeItem: ({ key }: { key: string }) => Promise<ExecuteResult>
  receive: () => Promise<ExecuteResult>
  receiveNft: () => Promise<ExecuteResult>
  updateCw20List: ({
    toAdd,
    toRemove,
  }: {
    toAdd: string[]
    toRemove: string[]
  }) => Promise<ExecuteResult>
  updateCw721List: ({
    toAdd,
    toRemove,
  }: {
    toAdd: string[]
    toRemove: string[]
  }) => Promise<ExecuteResult>
}
export class CwCoreClient extends CwCoreQueryClient implements CwCoreInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.executeProposalHook = this.executeProposalHook.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
    this.updateVotingModule = this.updateVotingModule.bind(this)
    this.updateProposalModules = this.updateProposalModules.bind(this)
    this.pause = this.pause.bind(this)
    this.setItem = this.setItem.bind(this)
    this.removeItem = this.removeItem.bind(this)
    this.receive = this.receive.bind(this)
    this.receiveNft = this.receiveNft.bind(this)
    this.updateCw20List = this.updateCw20List.bind(this)
    this.updateCw721List = this.updateCw721List.bind(this)
  }

  executeProposalHook = async ({
    msgs,
  }: {
    msgs: CosmosMsgFor_Empty[]
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        execute_proposal_hook: {
          msgs,
        },
      },
      'auto'
    )
  }
  updateConfig = async ({
    config,
  }: {
    config: Config
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          config,
        },
      },
      'auto'
    )
  }
  updateVotingModule = async ({
    module,
  }: {
    module: ModuleInstantiateInfo
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_voting_module: {
          module,
        },
      },
      'auto'
    )
  }
  updateProposalModules = async ({
    toAdd,
    toRemove,
  }: {
    toAdd: ModuleInstantiateInfo[]
    toRemove: string[]
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_proposal_modules: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      'auto'
    )
  }
  pause = async ({
    duration,
  }: {
    duration: Duration
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        pause: {
          duration,
        },
      },
      'auto'
    )
  }
  setItem = async ({
    addr,
    key,
  }: {
    addr: string
    key: string
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_item: {
          addr,
          key,
        },
      },
      'auto'
    )
  }
  removeItem = async ({ key }: { key: string }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_item: {
          key,
        },
      },
      'auto'
    )
  }
  receive = async (): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {},
      },
      'auto'
    )
  }
  receiveNft = async (): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive_nft: {},
      },
      'auto'
    )
  }
  updateCw20List = async ({
    toAdd,
    toRemove,
  }: {
    toAdd: string[]
    toRemove: string[]
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_cw20_list: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      'auto'
    )
  }
  updateCw721List = async ({
    toAdd,
    toRemove,
  }: {
    toAdd: string[]
    toRemove: string[]
  }): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_cw721_list: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      'auto'
    )
  }
}
